<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Page Not Found | StudyTogether</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      background-color: #1E1E2F;
      overflow: hidden;
      font-family: Arial, sans-serif;
    }

    #constellationCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      background: linear-gradient(to bottom, #1E1E2F, #111121);
    }

    .error-card {
      position: relative;
      z-index: 1;
      max-width: 400px;
      margin: 100px auto;
      background-color: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 12px;
      padding: 40px 30px;
      text-align: center;
      color: #fff;
      box-shadow: 0 8px 20px rgba(0,0,0,0.15);
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .error-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 30px rgba(0,0,0,0.3);
    }

    h1 {
      font-size: 5rem;
      margin-bottom: 20px;
    }

    p {
      font-size: 1.2rem;
      margin-bottom: 30px;
    }

    .btn-home {
      background-color: #FFCA28;
      color: #1E1E2F;
      font-weight: bold;
    }

    .btn-home:hover {
      background-color: #ffc107cc;
      color: #1E1E2F;
    }
  </style>
</head>
<body>
  <canvas id="constellationCanvas"></canvas>

  <div class="error-card">
    <h1>404</h1>
    <p>Oops! Page not found.</p>
    <a href="/" class="btn btn-home">Go Home</a>
  </div>

  <script>
    const canvas = document.getElementById('constellationCanvas');
    const ctx = canvas.getContext('2d');
    let width, height, particles;

    function resizeCanvas() {
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;
    }

    function createParticles() {
      particles = [];
      const total = 60;
      for(let i=0;i<total;i++){
        particles.push({
          x: Math.random()*width,
          y: Math.random()*height,
          vx: (Math.random()-0.5)*0.3,
          vy: (Math.random()-0.5)*0.3,
          radius: Math.random()*2+1
        });
      }
    }

    function drawParticles(){
      ctx.clearRect(0,0,width,height);
      for(let p of particles){
        ctx.beginPath();
        ctx.arc(p.x,p.y,p.radius,0,Math.PI*2);
        ctx.fillStyle="#FFCA28";
        ctx.fill();
      }

      for(let i=0;i<particles.length;i++){
        for(let j=i+1;j<particles.length;j++){
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const dist = Math.sqrt(dx*dx + dy*dy);
          if(dist<120){
            ctx.strokeStyle = "rgba(255,202,40," + (1-dist/120)*0.3 + ")";
            ctx.lineWidth = 0.5;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }
      updateParticles();
      requestAnimationFrame(drawParticles);
    }

    function updateParticles(){
      for(let p of particles){
        p.x += p.vx;
        p.y += p.vy;
        if(p.x<0 || p.x>width) p.vx*=-1;
        if(p.y<0 || p.y>height) p.vy*=-1;
      }
    }

    window.addEventListener('resize', ()=>{
      resizeCanvas();
      createParticles();
    });

    resizeCanvas();
    createParticles();
    drawParticles();
  </script>
</body>
</html>
