<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Friends | StudyShare</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      background-color: #1E1E2F;
      overflow-x: hidden;
      font-family: Arial, sans-serif;
    }

    /* Constellation background */
    #constellationCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      background: linear-gradient(to bottom, #1E1E2F, #111121);
    }

    .card-col {
      background-color: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #fff;
      margin-bottom: 20px;
    }

    .card {
      box-shadow: 0 8px 30px rgba(0,0,0,0.3);
    }

    h1, h3, p, li {
      color: #fff;
    }

    .btn-dark {
      background-color: #343A40;
      border: none;
    }

    .btn-dark:hover {
      background-color: #212529;
    }

    footer {
      background-color: #343A40;
      color: #fff;
      padding: 15px 0;
      text-align: center;
      z-index: 1;
      position: relative;
      margin-top: 50px;
    }

    .list-group-item {
      background-color: rgba(255,255,255,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      color: #fff;
    }
  </style>
</head>
<body>
  <!-- Constellation Background -->
  <canvas id="constellationCanvas"></canvas>

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/dashboard">StudyTogether</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link" href="/materials/new">Add Material</a></li>
          <li class="nav-item"><a class="nav-link" href="/dashboard">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container my-5" style="position: relative; z-index:1;">
    <h1 class="mb-4 text-center">Your Friends</h1>

    <!-- Add Friend Form -->
    <div class="card p-4 mb-5 shadow-sm card-col">
      <h3 class="mb-3">ADD FRIENDS!</h3>
      <% if(friendError) { %>
        <div class="alert alert-danger"><%= friendError %></div>
      <% } %>
      <% if(friendMessage) { %>
        <div class="alert alert-success"><%= friendMessage %></div>
      <% } %>
      <form action="/friends/add" method="POST" class="d-flex gap-2">
        <input type="email" name="email" class="form-control" placeholder="Friend's email" required>
        <button type="submit" class="btn btn-dark">Add</button>
      </form>
    </div>

    <!-- Friends List -->
    <div class="card p-4 shadow-sm card-col">
      <h3 class="mb-3">FRIENDS LIST</h3>
      <% if(user.friends.length === 0) { %>
        <p class="text-muted">You have no friends yet.</p>
      <% } else { %>
        <ul class="list-group">
          <% user.friends.forEach(friend => { %>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              <%= friend.username %> (<%= friend.email %>)
              <form action="/friends/<%= friend._id %>/remove" method="POST" class="m-0">
                <button type="submit" class="btn btn-danger btn-sm">Remove</button>
              </form>
            </li>
          <% }) %>
        </ul>
      <% } %>
    </div>
  </div>

  <footer>
    &copy; <%= new Date().getFullYear() %> StudyTogether. All rights reserved.
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const canvas = document.getElementById('constellationCanvas');
    const ctx = canvas.getContext('2d');
    let width, height, particles;

    function resizeCanvas() {
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;
    }

    // Create particles representing friends
    function createParticles() {
      particles = [];
      const friendCount = <%= user.friends.length %>;
      for (let i = 0; i < 50; i++) {
        particles.push({
          x: Math.random() * width,
          y: Math.random() * height,
          vx: (Math.random() - 0.5) * 0.3,
          vy: (Math.random() - 0.5) * 0.3,
          radius: 1.5 + Math.random()*1.5,
          friendIndex: i % friendCount // assign index to connect to friends
        });
      }
    }

    function drawParticles() {
      ctx.clearRect(0, 0, width, height);

      for (let p of particles) {
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI*2);
        ctx.fillStyle = "#FFCA28";
        ctx.fill();
      }

      // Connect lines to simulate friendships
      for (let i = 0; i < particles.length; i++) {
        for (let j = i+1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const dist = Math.sqrt(dx*dx + dy*dy);
          if(dist < 120) {
            ctx.strokeStyle = "rgba(255,202,40," + (1 - dist/120)*0.3 + ")";
            ctx.lineWidth = 0.5;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }

      updateParticles();
      requestAnimationFrame(drawParticles);
    }

    function updateParticles() {
      for (let p of particles) {
        p.x += p.vx;
        p.y += p.vy;

        if (p.x < 0 || p.x > width) p.vx *= -1;
        if (p.y < 0 || p.y > height) p.vy *= -1;

        // subtle drift toward center for visual cohesion
        const centerX = width/2;
        const centerY = height/2;
        const dx = centerX - p.x;
        const dy = centerY - p.y;
        const dist = Math.sqrt(dx*dx + dy*dy);
        if(dist < 300){
          p.vx += dx/8000;
          p.vy += dy/8000;
        }
      }
    }

    window.addEventListener("resize", () => {
      resizeCanvas();
      createParticles();
    });

    resizeCanvas();
    createParticles();
    drawParticles();
  </script>
</body>
</html>
